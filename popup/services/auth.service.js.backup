/**
 * Authentication Service for Calendar Ringback
 * Handles authentication for both Chrome and Edge browsers
 */

import errorTracker from '../../utils/error-tracking.js';
import { getBrowserConfig } from '../../config.js';

class AuthService {
  constructor() {
    this.token = null;
    this.tokenExpiry = null;
    this.isAuthenticating = false;
    this.userInfo = null;
    this.initialized = false;
    this.TOKEN_REFRESH_ALARM = 'calendarRingbackTokenRefresh';
    this.STORAGE_KEY = 'auth_state';
    this.isEdge = this._detectEdge();
    
    // Token refresh state
    this.refreshInProgress = false;
    this.lastRefreshAttempt = 0;
    this.refreshAttempts = 0;
    this.refreshCooldown = 30000; // 30 seconds
    
    // Set up alarm listener for token refresh
    chrome.alarms.onAlarm.addListener(this._handleAlarm.bind(this));
    
    // Initialize the service
    this.initialize();
  }

  /**
   * Initialize the auth service
   * @returns {Promise<boolean>} True if initialization was successful
   */
  async _loadState() {
    try {
      console.log('[AUTH] Loading auth state from storage...');
      const data = await chrome.storage.local.get([this.STORAGE_KEY, 'settings']);
      
      if (data[this.STORAGE_KEY]) {
        const { token, tokenExpiry, userInfo, refreshAttempts, lastRefreshAttempt } = data[this.STORAGE_KEY];
        const now = Date.now();
        const isTokenValid = token && tokenExpiry && tokenExpiry > now;
        
        console.log('[AUTH] Loaded auth state from storage:', {
          hasToken: !!token,
          tokenExpiry: tokenExpiry ? new Date(tokenExpiry).toISOString() : null,
          tokenValid: isTokenValid,
          hasUserInfo: !!userInfo,
          refreshAttempts,
          lastRefreshAttempt: lastRefreshAttempt ? new Date(lastRefreshAttempt).toISOString() : null,
          currentTime: new Date(now).toISOString()
        });
        
        // Only use the token if it's still valid
        if (isTokenValid) {
          this.token = token;
          this.tokenExpiry = tokenExpiry;
          this.userInfo = userInfo || null;
          this.refreshAttempts = refreshAttempts || 0;
          this.lastRefreshAttempt = lastRefreshAttempt || 0;
          console.log('[AUTH] Using valid token from storage');
          return true;
        } else if (token) {
          console.log('[AUTH] Token expired, clearing auth state');
          await this.signOut(); // Clear expired token
          return false;
        }
      } else {
        console.log('[AUTH] No auth state found in storage');
      }
      
      // No valid auth state - reset all state variables
      this.token = null;
      this.tokenExpiry = null;
      this.userInfo = null;
      this.refreshAttempts = 0;
      this.lastRefreshAttempt = 0;
      return false;
      
    } catch (error) {
      console.error('[AUTH] Error loading auth state:', error);
      errorTracker.captureException(error, { context: 'load_auth_state' });
      
      // Reset to known state on error
      this.token = null;
      this.tokenExpiry = null;
      this.userInfo = null;
      this.refreshAttempts = 0;
      this.lastRefreshAttempt = 0;
      return false;
    }
  }

  async _saveState() {
    try {
      // Don't save if we don't have a token
      if (!this.token) {
        console.log('[AUTH] No token to save, clearing auth state');
        await chrome.storage.local.remove(this.STORAGE_KEY);
        return true;
      }
      
      const state = {
        token: this.token,
        tokenExpiry: this.tokenExpiry,
        userInfo: this.userInfo || null,
        refreshAttempts: this.refreshAttempts,
        lastRefreshAttempt: this.lastRefreshAttempt
      };
      
      console.log('[AUTH] Saving auth state:', {
        hasToken: true,
        tokenExpiry: this.tokenExpiry ? new Date(this.tokenExpiry).toISOString() : null,
        hasUserInfo: !!this.userInfo,
        refreshAttempts: this.refreshAttempts,
        lastRefreshAttempt: this.lastRefreshAttempt ? new Date(this.lastRefreshAttempt).toISOString() : null
      });
      
      // Save to both sync and local storage for redundancy
      try {
        await chrome.storage.sync.set({
          [this.STORAGE_KEY]: state
        });
        console.log('[AUTH] Auth state saved to sync storage');
      } catch (syncError) {
        console.warn('[AUTH] Could not save to sync storage, using local only:', syncError);
      }
      
      await chrome.storage.local.set({
        [this.STORAGE_KEY]: state
      });
      
      console.log('[AUTH] Auth state saved successfully');
      return true;
      
    } catch (error) {
      console.error('[AUTH] Error saving auth state:', error);
      errorTracker.captureException(error, { 
        context: 'save_auth_state',
        hasToken: !!this.token,
        tokenExpiry: this.tokenExpiry ? new Date(this.tokenExpiry).toISOString() : null
      });
      return false;
    }
  }

  async initialize() {
    if (this.initialized) {
      console.log('[AUTH] Auth service already initialized');
      return true;
    }
    
    try {
      console.log('[AUTH] Initializing auth service...');
      
      // Load any saved state
      const stateLoaded = await this._loadState();
      console.log('[AUTH] State loaded:', stateLoaded);
      
      // Check if we have a valid token
      if (this.token && this.tokenExpiry && this.tokenExpiry > Date.now()) {
        console.log('[AUTH] Using existing valid token');
        // Schedule the next token refresh
        this._scheduleTokenRefresh();
        this.initialized = true;
        return true;
      }
      
      // If we have an expired token, try to refresh it
      if (this.token) {
        console.log('[AUTH] Token expired or invalid, attempting refresh');
        try {
          await this.refreshToken(false); // Non-interactive refresh
          this.initialized = true;
          return true;
        } catch (error) {
          console.log('[AUTH] Token refresh failed, clearing state');
          await this.signOut();
          this.initialized = true;
          return false;
        }
      }
      
      console.log('[AUTH] No existing auth state found');
      this.initialized = true;
      return false;
    } catch (error) {
      console.error('[AUTH] Initialization error:', error);
      errorTracker.captureException(error, { context: 'auth_initialization' });
      this.initialized = false;
      return false;
    }
  }

  /**
   * Detect if we're running in Microsoft Edge
   * @private
   */
  _detectEdge() {
    return navigator.userAgent.includes('Edg/');
  }

  /**
   * Handle alarm events
   * @private
   */
  _handleAlarm(alarm) {
    if (alarm.name === this.TOKEN_REFRESH_ALARM) {
      console.log('[AUTH] Token refresh alarm triggered');
      this.refreshToken(true).catch(console.error);
    }
  }

  /**
   * Get the current authentication status
   * @returns {Promise<boolean>} True if authenticated, false otherwise
   */
  async isAuthenticated() {
    try {
      // If we're already in the process of authenticating, wait for it to complete
      if (this.isAuthenticating) {
        console.log('[AUTH] Authentication already in progress, waiting...');
        // Wait for authentication to complete with a timeout
        const startTime = Date.now();
        while (this.isAuthenticating && (Date.now() - startTime) < 30000) { // 30s timeout
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        return !!this.token;
      }
      
      // Ensure we've loaded the latest state
      if (!this.initialized) {
        await this.initialize();
      }
      
      // If we have a valid token, we're authenticated
      if (this.token && this.tokenExpiry && this.tokenExpiry > Date.now()) {
        console.log('[AUTH] Valid token found, user is authenticated');
        return true;
      }
      
      // If we have a token but it's expired, try to refresh it non-interactively
      if (this.token) {
        console.log('[AUTH] Token expired, attempting non-interactive refresh');
        try {
          await this.refreshToken(false); // Non-interactive refresh
          return true;
        } catch (error) {
          console.log('[AUTH] Non-interactive token refresh failed, user needs to sign in');
          return false;
        }
      }
      
      console.log('[AUTH] No valid token found, user is not authenticated');
      return false;
    } catch (error) {
      console.error('[AUTH] Error checking authentication status:', error);
      errorTracker.captureException(error, { context: 'check_auth_status' });
      return false;
    }
  }

  /**
   * Get an authentication token
   * @param {boolean} interactive - Whether to show the auth UI if needed
   * @returns {Promise<string>} The OAuth token
   */
  async getToken(interactive = true) {
    if (this.token && (!this.tokenExpiry || this.tokenExpiry > Date.now())) {
      return this.token;
    }
    
    return this.refreshToken(interactive);
  }

  /**
   * Refresh the authentication token
   * @param {boolean} interactive - Whether to show the auth UI if needed
   * @returns {Promise<string>} The new token
   */
  async refreshToken(interactive = true) {
    const refreshId = Math.random().toString(36).substr(2, 9);
    const now = Date.now();
    
    // Cooldown period between refresh attempts (30 seconds)
    const COOLDOWN_PERIOD = 30000;
    if (this.lastRefreshAttempt && (now - this.lastRefreshAttempt) < COOLDOWN_PERIOD) {
      console.log(`[AUTH][${refreshId}] Refresh cooldown active, skipping`);
      if (this.token) return this.token;
      throw new Error('Refresh cooldown active');
    }
    
    // If another refresh is in progress, wait for it
    if (this.refreshInProgress) {
      console.log(`[AUTH][${refreshId}] Refresh already in progress, waiting...`);
      const startTime = now;
      while (this.refreshInProgress && (Date.now() - startTime) < 30000) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
      if (this.token) return this.token;
      throw new Error('Refresh timeout');
    }
    
    // Set refresh state
    this.refreshInProgress = true;
    this.lastRefreshAttempt = now;
    this.refreshAttempts = (this.refreshAttempts || 0) + 1;
    
    try {
      console.log(`[AUTH][${refreshId}] Starting token refresh (attempt ${this.refreshAttempts})`);
      
      let token;
      if (this.isEdge) {
        console.log(`[AUTH][${refreshId}] Using Edge authentication flow`);
        token = await edgeAuthService.authenticate();
      } else {
        console.log(`[AUTH][${refreshId}] Using Chrome authentication flow`);
        token = await this._chromeAuthFlow(interactive);
      }
      
      if (!token) {
        throw new Error('No token received from authentication flow');
      }
      
      // Reset attempt counter on success
      this.refreshAttempts = 0;
      this.token = token;
      this.tokenExpiry = now + (55 * 60 * 1000); // 55 minutes to be safe
      
      console.log(`[AUTH][${refreshId}] Token refresh successful, new expiry:`, 
        new Date(this.tokenExpiry).toISOString());
      
      // Save the updated state
      await this._saveState();
      this._scheduleTokenRefresh();
      
      return this.token;
      
    } catch (error) {
      console.error(`[AUTH][${refreshId}] Refresh failed:`, error);
      
      // Implement exponential backoff for retries
      const MAX_ATTEMPTS = 3;
      const BACKOFF_FACTOR = 2;
      
      if (this.refreshAttempts < MAX_ATTEMPTS) {
        const backoff = Math.min(
          1000 * Math.pow(BACKOFF_FACTOR, this.refreshAttempts - 1),
          30000 // Max 30 seconds
        );
        console.log(`[AUTH][${refreshId}] Retrying in ${backoff}ms...`);
        await new Promise(resolve => setTimeout(resolve, backoff));
        return this.refreshToken(interactive);
      }
      
      // If we've exhausted all attempts, clear the token
      if (this.refreshAttempts >= MAX_ATTEMPTS) {
        console.error('[AUTH] Max refresh attempts reached, signing out');
        await this.signOut();
      }
      
      // Log the error
      errorTracker.captureException(error, { 
        context: 'token_refresh',
        interactive,
        refreshAttempt: this.refreshAttempts,
        refreshId
      });
      
      throw error;
      
    } finally {
      this.refreshInProgress = false;
    }
  }

  /**
   * Handle Chrome authentication flow
   * @private
   */
  async _chromeAuthFlow(interactive) {
    console.log(`[AUTH] Starting Chrome auth flow (interactive: ${interactive})`);
    
    // Check if we're running in a context where chrome.identity is available
    if (!chrome.identity || !chrome.identity.getAuthToken) {
      const errorMsg = 'Chrome identity API is not available in this context';
      console.error('[AUTH]', errorMsg);
      throw new Error(errorMsg);
    }
    
    try {
      // First, try to get the token non-interactively to avoid popup blockers
      if (interactive) {
        try {
          console.log('[AUTH] Attempting non-interactive auth first...');
          const token = await new Promise((resolve, reject) => {
            chrome.identity.getAuthToken({ interactive: false }, (token) => {
              if (chrome.runtime.lastError) {
                console.log('[AUTH] Non-interactive auth failed (expected if not signed in):', 
                  chrome.runtime.lastError.message);
                resolve(null);
              } else {
                console.log('[AUTH] Successfully obtained token non-interactively');
                resolve(token);
              }
            });
          });
          
          if (token) {
            return token;
          }
        } catch (nonInteractiveError) {
          console.log('[AUTH] Non-interactive auth attempt failed, will try interactive:', 
            nonInteractiveError.message);
        }
      }
      
      // If we need interactive auth or non-interactive failed, try interactive
      if (interactive) {
        console.log('[AUTH] Starting interactive auth flow...');
        const token = await new Promise((resolve, reject) => {
          chrome.identity.getAuthToken({ interactive: true }, (token) => {
            if (chrome.runtime.lastError) {
              const error = chrome.runtime.lastError;
              console.error('[AUTH] Interactive auth error:', error);
              
              // Handle popup blocked by the browser
              if (error.message && error.message.includes('popup_closed_by_user')) {
                return reject(new Error('Authentication popup was blocked. Please allow popups for this site and try again.'));
              }
              
              // Handle user cancellation
              if (error.message && (error.message.includes('canceled') || 
                                   error.message.includes('user_cancelled'))) {
                return reject(new Error('Authentication was cancelled by user'));
              }
              
              // For other errors, include more context
              return reject(new Error(`Authentication failed: ${error.message || 'Unknown error'}`));
            }
            
            if (!token) {
              console.error('[AUTH] No token returned from Chrome auth');
              return reject(new Error('No authentication token received'));
            }
            
            console.log('[AUTH] Successfully obtained token interactively');
            resolve(token);
          });
        });
        
        return token;
      }
      
      // If we get here and don't have a token, and we're not interactive, fail
      throw new Error('Authentication required. Please sign in.');
      
    } catch (error) {
      console.error('[AUTH] Chrome auth flow failed:', error);
      
      // Add more context to the error if possible
      if (error.message && error.message.includes('OAuth2 request failed')) {
        // This often happens when the user needs to re-authenticate
        console.log('[AUTH] OAuth2 request failed - user may need to re-authenticate');
      }
      
      throw error;
    }
  }

  /**
   * Schedule token refresh
   * @private
   */
  _scheduleTokenRefresh() {
    if (!this.tokenExpiry) return;
    
    // Refresh 5 minutes before expiry
    const refreshTime = this.tokenExpiry - (5 * 60 * 1000);
    const timeUntilRefresh = Math.max(0, refreshTime - Date.now());
    
    // Clear any existing alarm
    chrome.alarms.clear(this.TOKEN_REFRESH_ALARM);
    
    // Set new alarm
    chrome.alarms.create(this.TOKEN_REFRESH_ALARM, {
      when: Date.now() + timeUntilRefresh
    });
  }

  /**
   * Sign in the user
   * @param {boolean} interactive - Whether to show UI if needed
   * @returns {Promise<{success: boolean, token?: string, userInfo?: Object, error?: string}>}
   */
  async signIn(interactive = true) {
    if (this.isAuthenticating) {
      console.log('[AUTH] Sign in already in progress');
      return { success: false, error: 'authentication_in_progress' };
    }

    this.isAuthenticating = true;
    
    try {
      console.log('[AUTH] Starting sign in flow...');
      
      // First try to refresh the token if we have one
      if (this.token) {
        console.log('[AUTH] Refreshing existing token...');
        try {
          const token = await this.refreshToken(interactive);
          if (token) {
            console.log('[AUTH] Token refreshed successfully');
            return { 
              success: true, 
              token,
              userInfo: this.userInfo 
            };
          }
        } catch (error) {
          console.warn('[AUTH] Token refresh failed, will try new sign in:', error);
          // Continue to new sign in
        }
      }
      
      // If we get here, we need a new token
      console.log('[AUTH] Getting new token...');
      const token = await this.getToken(interactive);
      
      if (!token) {
        throw new Error('No token received from authentication');
      }
      
      // Update state
      this.token = token;
      this.tokenExpiry = Date.now() + (60 * 60 * 1000); // 1 hour default
      
      // Get user info
      this.userInfo = await this.getUserInfo();
      
      // Save state
      await this._saveState();
      
      console.log('[AUTH] Sign in successful');
      return { 
        success: true, 
        token,
        userInfo: this.userInfo 
      };
      
    } catch (error) {
      console.error('[AUTH] Sign in failed:', error);
      await this.signOut(); // Clean up on error
      
      return { 
        success: false, 
        error: error.message || 'sign_in_failed' 
      };
    } finally {
      this.isAuthenticating = false;
    }
  }

    
    // If we need interactive auth or non-interactive failed, try interactive
    if (interactive) {
      console.log('[AUTH] Starting interactive auth flow...');
      const token = await new Promise((resolve, reject) => {
        chrome.identity.getAuthToken({ interactive: true }, (token) => {
          if (chrome.runtime.lastError) {
            const error = chrome.runtime.lastError;
            console.error('[AUTH] Interactive auth error:', error);
            
            // Handle popup blocked by the browser
            if (error.message && error.message.includes('popup_closed_by_user')) {
              return reject(new Error('Authentication popup was blocked. Please allow popups for this site and try again.'));
            }
            
            // Handle user cancellation
            if (error.message && (error.message.includes('canceled') || 
                                 error.message.includes('user_cancelled'))) {
              return reject(new Error('Authentication was cancelled by user'));
            }
            
            // For other errors, include more context
            return reject(new Error(`Authentication failed: ${error.message || 'Unknown error'}`));
          }
          
          if (!token) {
            console.error('[AUTH] No token returned from Chrome auth');
            return reject(new Error('No authentication token received'));
          }
          
          console.log('[AUTH] Successfully obtained token interactively');
          resolve(token);
        });
   */
  async getUserInfo() {
    if (this.userInfo) {
      return this.userInfo;
    }
    
    try {
      console.log('[AUTH] Fetching user info...');
      const token = await this.getToken();
      
      const response = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error(`Failed to fetch user info: ${response.statusText}`);
      }
      
      this.userInfo = await response.json();
      console.log('[AUTH] User info fetched:', this.userInfo);
      
      // Save the updated state with user info
      await this._saveState();
      
      return this.userInfo;
      
    } catch (error) {
      console.error('[AUTH] Error fetching user info:', error);
      errorTracker.captureException(error, { 
        context: 'get_user_info',
        hasToken: !!this.token
      });
      
      // Clear invalid token if the error is auth-related
      if (error.message?.includes('401') || 
          error.message?.toLowerCase().includes('invalid token') ||
          error.message?.toLowerCase().includes('token expired')) {
        console.log('[AUTH] Clearing invalid token');
        await this.signOut();
      }
      
      throw error;
    }
  }
}

// Export as singleton
const authService = new AuthService();
export default authService;
